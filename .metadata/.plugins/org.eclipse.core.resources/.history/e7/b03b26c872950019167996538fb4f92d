package api;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 *
 * @author JacksMac This class contains Restful HTTP Get Requests.
 */
public class Get {

	private static String url = "https://maps.googleapis.com/maps/api/distancematrix/json";
	private static DecimalFormat decimalFormat = new DecimalFormat("0.00");

	public JSONObject distanceMatrixAPI(String origin, String destination)
			throws FileNotFoundException, IOException, ParseException {

		JSONObject jsonObject = (JSONObject) new JSONParser().parse(new FileReader("./secrets.json"));

		UriComponentsBuilder uri = UriComponentsBuilder.fromHttpUrl(url).queryParam("units", "imperial")
				.queryParam("origins", origin).queryParam("destinations", destination)
				.queryParam("key", (String) jsonObject.get("key"));

		RestTemplate restTemplate = new RestTemplate();
		return restTemplate.getForObject(uri.toUriString(), JSONObject.class);
	}

	/**
	 * Obtains either "distance" or "duration" from the elements object inside of
	 * row in the Distance Matrix API JSON response data
	 *
	 * @param jsonObject - (JSONObject) JSON response object from DistanceMatrixAPI
	 * @param key        - (String) either distance or duration
	 * @return (double) value of either distance (in meters) or duration (in
	 *         seconds)
	 * @throws ParseException
	 */
	@SuppressWarnings("unchecked")
	public double getElement(JSONObject jsonObject, String key) throws ParseException {
		Gson gson = new GsonBuilder().create();

		List<JSONObject> rows_data = (List<JSONObject>) jsonObject.get("rows");
		JSONObject elements_object = (JSONObject) new JSONParser().parse(gson.toJson(rows_data.get(0)));
		List<JSONObject> elements_list = (List<JSONObject>) new JSONParser()
				.parse(gson.toJson(elements_object.get("elements")));
		JSONObject elements_data = (JSONObject) new JSONParser().parse(gson.toJson(elements_list.get(0)));
		JSONObject distance_list = (JSONObject) new JSONParser().parse(gson.toJson(elements_data.get(key)));

		return (double) distance_list.get("value");
	}

	/**
	 * Obtains either the "origin_addresses" or "destination_addresses" param from
	 * the Distance Matrix API JSON response data
	 *
	 * @param jsonObject - (JSONObject) JSON response object from DistanceMatrixAPI
	 * @param key        - (String) either "origin_addresses" or
	 *                   "destination_addresses"
	 * @return (String) The specified origin or destination address.
	 */
	@SuppressWarnings("unchecked")
	public String getAddress(JSONObject jsonObject, String key) {
		List<Object> address_list = (List<Object>) jsonObject.get(key);
		String address = (String) address_list.get(0);
		return address;
	}

	public double convertMetersToMiles(double meters) {
		return Double.parseDouble(decimalFormat.format(meters * 0.00062137));
	}

	public long convertSecondsToMinutes(double seconds) {
		return TimeUnit.MILLISECONDS.toMinutes((long) seconds);
	}

}
