package api;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.List;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

/**
 *
 * @author JacksMac This class contains Restful HTTP Get Requests.
 */
public class Get {

	private static String url = "https://maps.googleapis.com/maps/api/distancematrix/json";
	private static DecimalFormat decimalFormat = new DecimalFormat("0.00");

	@SuppressWarnings("unchecked")
	public String distanceMatrixAPI(String origin, String destination)
			throws FileNotFoundException, IOException, ParseException {

		JSONObject jsonObject = (JSONObject) new JSONParser().parse(new FileReader("./secrets.json"));

		UriComponentsBuilder uri = UriComponentsBuilder.fromHttpUrl(url).queryParam("units", "imperial")
				.queryParam("origins", origin).queryParam("destinations", destination)
				.queryParam("key", (String) jsonObject.get("key"));

		RestTemplate restTemplate = new RestTemplate();
		JSONObject result = restTemplate.getForObject(uri.toUriString(), JSONObject.class);

		List<Object> da_list = (List<Object>) result.get("destination_addresses");
		String da = (String) da_list.get(0);

		List<Object> oa_list = (List<Object>) result.get("origin_addresses");
		String oa = (String) oa_list.get(0);

		List<Object> rows_list = (List<Object>) result.get("rows");
		Class<?> rows = rows_list.getClass();

		List<JSONObject> rows_data = (List<JSONObject>) result.get("rows");

		System.out.println("[Key]: \t" + result.keySet());
		System.out.println("[DA]: \t" + da);
		System.out.println("[OA]: \t" + oa);
		// System.out.println("[Rows]:\t" + rows);
		// ystem.out.println("[Status]: " + result.get("status"));
		System.out.println("[JSON]: " + result.toJSONString());

		////////////////

		Gson gson = new GsonBuilder().create();
		JSONObject rowObject = (JSONObject) new JSONParser().parse(gson.toJson(rows_list.get(0)));
		System.out.println("\n[rows_list]: \t\t\t\t" + rows_list);
		System.out.println("[rowObject.get(\'elements\')]: \t\t" + rowObject.get("elements"));

		////////////////

		JSONObject elements_object = (JSONObject) new JSONParser().parse(gson.toJson(rows_data.get(0)));
		System.out.println("[elements_object]: \t\t\t" + elements_object);
		System.out.println("[elements_object.get(\'elements\')]: \t" + elements_object.get("elements"));

		////////////////

		List<JSONObject> elements_list = (List<JSONObject>) new JSONParser()
				.parse(gson.toJson(elements_object.get("elements")));
		System.out.println("\n[elements_list]: \t\t\t" + elements_list);
		System.out.println("[elements_list.get(0)]: \t\t" + elements_list.get(0));

		////////////////

		JSONObject elements_data = (JSONObject) new JSONParser().parse(gson.toJson(elements_list.get(0)));
		System.out.println("\n[Data]: " + elements_data);
		System.out.println("[Duration]: " + elements_data.get("duration"));
		System.out.println("[Distance]: " + elements_data.get("distance"));

		JSONObject duration_list = (JSONObject) new JSONParser().parse(gson.toJson(elements_data.get("duration")));

		JSONObject distance_list = (JSONObject) new JSONParser().parse(gson.toJson(elements_data.get("distance")));

		System.out.println("\n" + duration_list.get("value"));
		System.out.println("\n" + getElement(result));

		return "";

		// duration_list <-- elements_data <-- elements_list <-- elements_object <--
		// rows_data <-- result
		/*
		 *
		 */
		// result --> rows_data --> elements_object --> elements_list --> elements_data
		// --> duration_list

	}

	@SuppressWarnings("unchecked")
	/**
	 * Obtains either "distance" or "duration" from the elements object inside of
	 * row in the Distance Matrix API JSON response data
	 * 
	 * @param jsonObject - Must either be distance or duration. 
	 * @return value of either distance (in meters) or duration (in seconds)
	 * @throws ParseException
	 */
	public double getElement(JSONObject jsonObject) throws ParseException {
		Gson gson = new GsonBuilder().create();

		List<JSONObject> rows_data = (List<JSONObject>) jsonObject.get("rows");
		JSONObject elements_object = (JSONObject) new JSONParser().parse(gson.toJson(rows_data.get(0)));
		List<JSONObject> elements_list = (List<JSONObject>) new JSONParser()
				.parse(gson.toJson(elements_object.get("elements")));
		JSONObject elements_data = (JSONObject) new JSONParser().parse(gson.toJson(elements_list.get(0)));
		JSONObject distance_list = (JSONObject) new JSONParser().parse(gson.toJson(elements_data.get("distance")));

		return convertMetersToMiles((double) distance_list.get("value"));
	}

	public double getDurationInMinutes(JSONObject jsonObject) {

		return 0.0;
	}

	private double convertMetersToMiles(double meters) {
		return Double.parseDouble(decimalFormat.format(meters * 0.00062137));
	}

}
